from typing import List, Tuple


def print_tree_table(table: list[list[str]]) -> None:
    for row in table:
        print(*row,sep="")

def draw_tree(height: int, interval: int) -> list[list[str]] | None:
    """
    Generates a Christmas tree in a 2D table of size WIDTH * (HEIGHT + 2).
    Args:
        height: Height of the tree body (excluding star and trunk), must be >= 2.
        interval: Interval at which decorations (O) appear after one space, must be >= 1.
    Returns:
        A 2D list representing the tree, or None if inputs are invalid.
    """
    if height < 2:
        print("Height must be at least 2.")
        return None
    if interval < 1:
        print(" Interval must be greater than 0.")
        return None

    # Calculate width (2 * height - 1) and total rows (height + 2 for star and trunk)
    width = 2 * height - 1
    total_height = height + 2
    mid = width // 2

    # create 2D list width * size representing table
    table = [[" " for _ in range(width)] for _ in range(height + 2)]

    # Add star (X) at the top center
    table[0][mid] = "X"

    # Add crown (^) below the star
    table[1][mid] = "^"

    # Set interval counter
    interval_counter = 0

    # Add tree body with decoration
    for row in range(2, height + 1):
        # stars = 2 * row - 1 -2  # Number of * characters in this row
        stars_counter = 0  # Reset counter for stars position between / \
        start_col = mid - row + 1  # Leftmost column for /
        end_col = mid + row - 1  # Rightmost column for \
        table[row][start_col] = "/"  # Left edge
        table[row][end_col] = "\\"  # Right edge
        for j in range(start_col + 1, end_col):  # Fill middle with *
            stars_counter += 1
            if stars_counter % 2 == 0:
                if interval_counter % interval == 0:
                    table[row][j] = "O"
                else:
                    table[row][j] = "*"
                interval_counter += 1

            else:
                table[row][j] = "*"

    # Add trunk (| |) at the bottom
    table[total_height - 1][mid - 1] = "|"
    table[total_height - 1][mid + 1] = "|"

    return table

def create_card(trees:List[Tuple[int,int,int,int]]) -> None:
    """
    Creates a postcard (50x30) when more than two arguments are provided.
    - First and last lines contain '-'.
    - Other lines start and end with '|'.
    - Line 27 contains 'Merry Xmas' centered.
     - Each tree is placed with star (X) at coordinates [L, C] using given height and interval.
    Args:
        trees: List of tuples (H, I, L, C) for height, interval, line, and column of each tree.
    """
    # Define postcard dimensions
    width_card = 50
    height_card = 30

    # Create 2D list initialized with spaces
    card = [[" " for _ in range(width_card)] for _ in range(height_card)]

    # Fill first and last lines with '-'
    card[0] = ["-" for _ in range(width_card)]
    card[height_card - 1] = ["-" for _ in range(width_card)]

    # Add '|' at start and end of lines 1 to 28
    for row in range(1, height_card - 1):
        card[row][0] = "|"
        card[row][width_card - 1] = "|"

    # Add "Merry Xmas" in row 27, centered
    text = "Merry Xmas"
    text_length = len(text)
    start_col = (width_card - text_length) // 2  # Center: (50 - 10) // 2 = 20
    for i, char in enumerate(text):
        card[27][start_col + i] = char

    # Place each tree on the postcard
    for height, interval, line, col in trees:
        tree_table = draw_tree(height, interval)
        if tree_table is None:
            continue  # Skip invalid trees

        tree_height = len(tree_table)
        tree_width = len(tree_table[0])
        tree_mid = tree_width // 2

        # Check if tree fits within postcard boundaries
        if line < 0 or line >= height_card or col < 0 or col >= width_card:
            print(f"Tree at [{line}, {col}] is out of bounds.")
            continue
        if line + tree_height > 27:  # Avoid overwriting "Merry Xmas"
            print(f"Tree at [{line}, {col}] too tall: Maximum height is {25 - line} to fit above 'Merry Xmas'.")
            continue
        if col - tree_mid < 1 or col + tree_mid >= width_card - 1:  # Avoid overwriting '|' borders
            print(f"Tree at [{line}, {col}] too wide: Center must be between {tree_mid} and {width_card - 1 - tree_mid}.")
            continue

        # Place the tree with star (X) at [line, col]
        for i in range(tree_height):
            for j in range(tree_width):
                if tree_table[i][j] != " ":  # Only copy non-space characters
                    card[line + i][col - tree_mid + j] = tree_table[i][j]

    # # Print the postcard
    # for row in card:
    #     print("".join(row))
    print_tree_table(card)



if __name__ == "__main__":
    print("Input a number for height of the Christmas tree and interval for decorations:")
    try:
        usr = input().split()
        # A single tree will be printed if the input contains only two values.
        if len(usr) == 2:
            height_int = int(usr[0])
            interval_int = int(usr[1])
            single_tree = draw_tree(height_int, interval_int)
            print_tree_table(single_tree)
        # A card will be printed if the input contains multiplication of four numbers.
        elif len(usr) % 4 == 0:
            numbers = [int(x) for x in usr]
            # Group into tuples of (H, I, L, C)
            tree_lst = [(numbers[i], numbers[i + 1], numbers[i + 2], numbers[i + 3]) for i in range(0, len(numbers), 4)]
            create_card(tree_lst)
        else:
            print("Too few arguments: Please provide at least two values (height and interval).")
            exit(1)
    except ValueError as e:
        if str(e).startswith("Too few arguments"):
            print(str(e))
        else:
            print("Invalid input: All arguments must be integers.")
        exit(1)
